generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  userName  String   @unique
  password  String
  roleId    String   @map("role_id") @db.Uuid
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Role {
  id    String   @id @default(uuid()) @db.Uuid
  name  String
  users User[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Customer {
  id         String   @id @default(uuid()) @db.Uuid
  firstName  String
  middleName String
  lastName   String
  tinNumber  String
  phone      String
  address    String
  sales      Sale[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Driver {
  id                String   @id @default(uuid()) @db.Uuid
  name              String
  truckNumber       String
  djboutiPhone      String
  ethiopiaPhone     String
  associationName   String
  associationPhone  String
  ownerName         String
  ownerPhone        String
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
}

model Product {
  id                String   @id @default(uuid()) @db.Uuid
  name              String   @unique
  category          String
  unitOfMeasurement String
  purchases         ProductPurchase[]
  declarations      ProductDeclaration[]
  sales             SaleDetail[]
  inventories    Inventory[] 
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
}

model Declaration {
  id                String           @id @default(uuid()) @db.Uuid
  number            String
  date              DateTime
  products          ProductDeclaration[]
  purchases         ProductPurchase[]
  sales             SaleDetail[]
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")
}

model ProductDeclaration {
  id                    String   @id @default(uuid()) @db.Uuid
  declarationQuantity  Int
  totalIncomeTax       Float
  unitIncomeTax        Float
  declarationBalance   Float
  purchasedQuantity    Int
  productId            String   @map("product_id") @db.Uuid
  product              Product  @relation(fields: [productId], references: [id])
  declarationId        String   @map("declaration_id") @db.Uuid
  declaration          Declaration @relation(fields: [declarationId], references: [id])
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")
}

model Purchase {
  id                String        @id @default(uuid()) @db.Uuid
  date              DateTime
  number            Int
  truckNumber       String
  products          ProductPurchase[]
  sales             SaleDetail[]
  inventories       Inventory[]      
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
}

model ProductPurchase {
  id                     String        @id @default(uuid()) @db.Uuid
  productId             String        @map("product_id") @db.Uuid
  product               Product       @relation(fields: [productId], references: [id])
  purchaseId            String        @map("purchase_id") @db.Uuid
  purchase              Purchase      @relation(fields: [purchaseId], references: [id])
  declarationId         String        @map("declaration_id") @db.Uuid
  declaration           Declaration   @relation(fields: [declarationId], references: [id])
  purchaseQuantity      Int
  purchaseUnitPrice     Float
  purchaseTotal         Float
  transportCost         Float
  transitFees           Float
  eslCustomCost         Float
  purchaseUnitCostOfGoods Float
  inventories    Inventory[] 
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")
}

model Store {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  address     String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
}

model Supplier {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  address     String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
}


model Sale {
  id             String   @id @default(uuid()) @db.Uuid
  invoiceNumber  Int    
  invoiceDate    DateTime    
  customerId     String    @map("customer_id") @db.Uuid
  customer       Customer   @relation(fields: [customerId], references: [id])
  inventories    Inventory[] 
  sales          SaleDetail[]     
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
}

model SaleDetail {
  id                    String   @id @default(uuid()) @db.Uuid
  saleQuantity          Int    
  saleUnitPrice         Float    
  totalSales            Float    
  unitCostOfGoods       Float  
  saleId                String        @map("sale_id") @db.Uuid
  sale                  Sale      @relation(fields: [saleId], references: [id])
  productId             String    @map("product_id") @db.Uuid
  product               Product   @relation(fields: [productId], references: [id])
  purchaseId            String        @map("purchase_id") @db.Uuid
  purchase              Purchase      @relation(fields: [purchaseId], references: [id])
  declarationId         String        @map("declaration_id") @db.Uuid
  declaration           Declaration   @relation(fields: [declarationId], references: [id])
  inventories    Inventory[] 
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
}

model ChartOfAccount {
  id                    String   @id @default(uuid()) @db.Uuid
  name                  String
  accountTypeId         String        @map("accountType_id") @db.Uuid
  accountType           AccountType      @relation(fields: [accountTypeId], references: [id])
  accountSubTypeId      String        @map("accountSubType_id") @db.Uuid
  accountSubType        AccountSubType      @relation(fields: [accountSubTypeId], references: [id])
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
}

model AccountType {
  id                    String   @id @default(uuid()) @db.Uuid
  name                  String
  accountSubTypes       AccountSubType[]
  chartOfAccount        ChartOfAccount[]
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
}

model AccountSubType {
  id                    String   @id @default(uuid()) @db.Uuid
  name                  String
  accountTypeId         String       @map("accountType_id") @db.Uuid
  chartOfAccount        ChartOfAccount[]
  accountType           AccountType      @relation(fields: [accountTypeId], references: [id])
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
}

model Inventory {
  id          String   @id @default(uuid()) @db.Uuid
  purchaseId  String?  @map("purchase_id") @db.Uuid
  purchase    Purchase? @relation(fields: [purchaseId], references: [id])
  productPurchaseId  String?  @map("product_purchase_id") @db.Uuid
  productPurchase    ProductPurchase? @relation(fields: [productPurchaseId], references:[id])
  saleDetailId       String?  @map("sale_detail_id") @db.Uuid
  SaleDetail         SaleDetail? @relation(fields: [saleDetailId], references:[id])
  saleId      String?   @map("sale_id") @db.Uuid
  sale        Sale?     @relation(fields: [saleId], references: [id])
  productId   String    @map("product_id") @db.Uuid
  product     Product   @relation(fields:[productId], references: [id])
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  balanceQuantity       Float

}
